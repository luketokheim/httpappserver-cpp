#
# Workflow for C++ continuous integration (CI) with cmake and conan
# - Run on pull request and push to main branch
# - Install dependencies with conan
# - Use CMake to configure and build
# - Use CTest to run tests
#
name: test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      
      matrix:
        os: [windows-2022, macos-12, ubuntu-22.04]

    steps:
    - uses: actions/checkout@v3

    - name: Install package manager
      #
      # Install conan and autodetect the build profile. Defaults are:
      #
      # settings.build_type=Release
      #
      # - Windows Server 2022
      #   settings.compiler=Visual Studio
      #   settings.compiler.version=17
      #
      # - macOS 12.6
      #   settings.compiler=apple-clang
      #   settings.compiler.version=14
      #   settings.compiler.libcxx=libc++
      #
      # - Ubuntu 22.04
      #   settings.compiler=gcc
      #   settings.compiler.version=11
      #   settings.compiler.libcxx=libstdc++
      #
      run: >
        python3 -m ensurepip --upgrade
        && python3 -m pip install conan
        && conan profile new default --detect

    - name: Install dependencies
      #
      # Download packages listed in our manifest. Generate toolchain file for
      # CMake so that we can use find_package(...) to find deps
      #
      run: >
        install -d build
        && cd build
        && conan install .. --build=missing

    - name: Configure
      #
      # Configure CMake in the "build" subdirectory.
      #
      working-directory: build
      run: >
        cmake ..
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_TOOLCHAIN_FILE="conan_toolchain.cmake"

    - name: Build
      #
      # Build all enabled programs with the current configuration.
      #
      working-directory: build
      run: cmake --build .

    - name: Test
      #
      # Execute tests defined by the CMake configuration. In our project this
      # is any executable target that has an associated add_test(NAME target).
      #
      # Example:
      #   add_executable(unit_test unit_test.cpp)
      #   add_test(UnitTestName unit_test)
      #
      working-directory: build
      run: ctest --output-on-failure
